name: JimCarry CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Decode application.yml from secrets
        run: |
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./JimCarry/src/main/resources/application.yml

      - name: Give execute permission to mvnw
        run: chmod +x ./JimCarry/mvnw

      - name: Build with Maven Wrapper
        run: ./mvnw clean package -DskipTests
        working-directory: ./JimCarry

      - name: Run tests
        run: ./mvnw test
        working-directory: ./JimCarry

      - name: Test Server Connecting
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2223
          script: echo "Connected Server"

      - name: Copy jar file to server using SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2223
          source: ./JimCarry/target/*.jar
          target: /home/${{ secrets.SERVER_USER }}/deploy

      - name: Restart Spring Boot application on server
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2223
          script: |
              DEPLOY_PATH="/home/${{ secrets.SERVER_USER }}/deploy"
              JAR_NAME="jimcarry-0.0.1-SNAPSHOT.jar"
              PROFILE_FILE="$DEPLOY_PATH/current_profile.txt"
              PID_FILE="$DEPLOY_PATH/app.pid"
              NGINX_CONF="/etc/nginx/nginx.conf"

              if [ -f "$PROFILE_FILE" ]; then
                CURRENT_PROFILE=$(cat "$PROFILE_FILE")
              else
                CURRENT_PROFILE="blue"
                echo "blue" > "$PROFILE_FILE"
              fi

              if [ "$CURRENT_PROFILE" == "blue" ]; then
                NEW_PROFILE="green"
                NEW_PORT=8091
                OLD_PORT=8090
              else
                NEW_PROFILE="blue"
                NEW_PORT=8090
                OLD_PORT=8091
              fi

              echo "Switching to $NEW_PROFILE profile..."
              echo "$NEW_PROFILE" > "$PROFILE_FILE"

              # Nginx 설정 변경
              sudo sed -i "s/server 127.0.0.1:$OLD_PORT;/server 127.0.0.1:$NEW_PORT;/g" "$NGINX_CONF"

              # 기존 애플리케이션 종료 (PID 기반)
              if [ -f "$PID_FILE" ]; then
                PID=$(cat "$PID_FILE")
                echo "Stopping existing application (PID: $PID)..."
                kill -15 $PID
                sleep 5
                rm -f "$PID_FILE"
              fi

              # 새로운 프로파일로 애플리케이션 실행
              chmod +x "$DEPLOY_PATH/$JAR_NAME"
              nohup java -jar -Dspring.profiles.active="$NEW_PROFILE" "$DEPLOY_PATH/$JAR_NAME" > $DEPLOY_PATH/output.log 2>&1 & echo $! > "$PID_FILE"

              # Health Check (최대 60초 대기)
              echo "Waiting for application to start on port $NEW_PORT..."
              for i in {1..12}; do
                if curl -s "http://127.0.0.1:$NEW_PORT/actuator/health" | grep -q "UP"; then
                  echo "Application started successfully on port $NEW_PORT."
                  break
                fi
                echo "Retrying in 5 seconds..."
                sleep 5
              done

              # Nginx 리로드
              echo "Reloading Nginx..."
              sudo nginx -s reload

              echo "Deployment completed! Current profile: $NEW_PROFILE"
