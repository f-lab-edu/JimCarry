name: JimCarry CI

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행!

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소에서 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java JDK 설정
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: 17  # 사용하는 Java 버전
          distribution: temurin

      # 3. application.yml 생성 (Base64로 인코딩된 값을 secrets에 저장)
      - name: Decode application.yml from secrets
        run: |
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > ./JimCarry/src/main/resources/application.yml

      # 4. mvnw 파일에 실행 권한 부여
      - name: Give execute permission to mvnw
        run: chmod +x ./JimCarry/mvnw
        
      # 5. Maven Wrapper 사용하여 빌드
      - name: Build with Maven Wrapper
        run: ./mvnw clean package -DskipTests
        working-directory: ./JimCarry

      # 6. 테스트 실행
      - name: Run tests
        run: ./mvnw test
        working-directory: ./JimCarry

      # 7. 서버 접속 테스트
      - name: Test Server Connection
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2223
          script: |
            echo "Connected to Server"

      # 8. 빌드된 .jar 파일을 서버로 전송 (SCP 사용)
      - name: Copy jar file to server using SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2223
          source: ./JimCarry/target/*.jar  # 빌드된 .jar 파일 경로
          target: /home/root/deploy  # 서버의 목적지 경로

      # 9. 서버에서 Spring Boot 애플리케이션 실행 및 Nginx 재시작
      - name: Restart Spring Boot application on server
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 2223
          script: |
            DEPLOY_PATH="/home/root/deploy/JimCarry/target"  # 배포 경로
            JAR_NAME=$(ls -1 $DEPLOY_PATH/*.jar | head -n 1)
            PROFILE_FILE="$DEPLOY_PATH/current_profile.txt"
            PID_FILE="$DEPLOY_PATH/app.pid"
            NGINX_CONF="/etc/nginx/nginx.conf"

            # .jar 파일 존재 여부 점검
            if [ ! -f "$JAR_NAME" ]; then
              echo "ERROR: $JAR_NAME not found!"
              exit 1
            fi

            # 현재 프로파일 추적
            if [ -f "$PROFILE_FILE" ]; then
              CURRENT_PROFILE=$(cat "$PROFILE_FILE")
            else
              CURRENT_PROFILE="blue"
              echo "blue" > "$PROFILE_FILE"
            fi

            if [ "$CURRENT_PROFILE" == "blue" ]; then
              NEW_PROFILE="green"
              NEW_PORT=8091
              OLD_PORT=8090
            else
              NEW_PROFILE="blue"
              NEW_PORT=8090
              OLD_PORT=8091
            fi

            echo "Switching to $NEW_PROFILE profile..."
            echo "$NEW_PROFILE" > "$PROFILE_FILE"

            # 기존 애플리케이션 종료 (PID 존재 여부 확인)
            if [ -f "$PID_FILE" ]; then
              PID=$(cat "$PID_FILE")
              if [ -n "$PID" ] && ps -p $PID > /dev/null; then
                echo "Stopping existing application (PID: $PID)..."
                kill -15 $PID
                sleep 5
              else
                echo "No running process found for PID: $PID. Skipping kill."
              fi
              rm -f "$PID_FILE"
            fi

            # JAR 파일 실행 가능하도록 권한 부여
            chmod +x "$JAR_NAME"

            # 애플리케이션 실행
            nohup java -jar -Dspring.profiles.active="$NEW_PROFILE" "$JAR_NAME" > "$DEPLOY_PATH/output.log" 2>&1 & echo $! > "$PID_FILE"

            # 실행 확인
            if [ ! -f "$PID_FILE" ]; then
              echo "ERROR: Application failed to start!"
              exit 1
            fi

            # Health check
            echo "Waiting for application to start on port $NEW_PORT..."
            
            # 최대 30초까지 기다림 (5초마다 확인)
            for i in {1..6}; do
              RESPONSE=$(curl -s -m 10 "http://127.0.0.1:$NEW_PORT/actuator/health")
              echo "Response: $RESPONSE"
              
              # 성공적인 응답이 올 경우
              if echo "$RESPONSE" | grep -q '"status":"UP"'; then
                echo "Application started successfully on port $NEW_PORT."
                break
              fi
            
              echo "Retrying in 5 seconds..."
              sleep 5
            done
            
            # 서버가 응답하지 않으면 에러 메시지 출력 후 종료
            if [ $i -eq 6 ]; then
              echo "ERROR: Application did not start properly within the timeout period."
              exit 1
            fi
            
            # Nginx 리로드 (애플리케이션이 정상적으로 시작된 후에만 실행)
            echo "Reloading Nginx..."
            sudo nginx -s reload
            
            echo "Deployment completed! Current profile: $NEW_PROFILE"
